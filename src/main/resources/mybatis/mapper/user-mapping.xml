<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="project.studycafe.domain.user.mapper.UserMapper">

	<select id="getUser" parameterType="int" resultType="userEntity">
		select
			id,
			user_id as userId,
			user_pw as userPw,
			address,
			nickname,
			email,
			name,
			reg_date as regDate,
			image_no,
			role,
			place_id as placeId
		from users
		where id=#{id}
	</select>

	<select id="getUserPwByUserId" parameterType="String"
		resultType="String">
		select
			user_pw as userPw
		from users
		where user_id=#{userId}
	</select>

	<select id="getUserByNick" parameterType="String"
		resultType="patchUserReq">
		select
			id,
			address,
			nickname,
			name,
			place_id
		from users
		where
			nickname=#{nickname}
	</select>

	<insert id="insertUser" parameterType="signUpReq">
		insert into
		users
			(user_id,user_pw, address, nickname, email, name, image_no, role)
		values
			(#{userId}, #{userPw}, #{address}, #{nickname}, #{email},#{name}, 0, #{role})
	</insert>

	<update id="updateUser" parameterType="patchUserReq">
		update users
		<set>
			<if test="address != null and address != ''">
				address = #{address},
			</if>
			<if test="nickname != null and nickname != ''">
				nickname = #{nickname},
			</if>
			<if test="name != null and name != ''">
				name = #{name},
			</if>
			<if test="placeId != null and placeId != ''">
				place_id = #{placeId}
			</if>
		</set>
		where id=#{id}
	</update>

	<update id="updateUserPw" parameterType="patchUserPwReq">
		update users
		set
			user_pw=#{newPw}
		where user_id=#{userId} and user_pw=#{originPw}
	</update>
	
	<update id="updateUserPlaceId" parameterType="patchUserPlaceIdReq">
		update users
		set	place_id=#{placeId}
		where id=#{userId}
	</update>

	<delete id="deleteUser" parameterType="int">
		delete from users
		where
		id=#{id}
	</delete>

	<select id="login" parameterType="String"
		resultType="userEntity">
		select
			id,
			user_id as userId,
			user_pw as userPw,
			address,
			nickname,
			email,
			name,
			reg_date as regDate,
			image_no as imageNo,
			role,
			place_id as placeId
		from
		users
		where user_id=#{userId}
	</select>

	<select id="findId" parameterType="findIdReq"
		resultType="String">
		select user_id
		from users
		where name = #{name} and email =
		#{email}
	</select>

	<!-- 비밀번호 찾기용 -->
	<select id="getEmailByUserId" parameterType="String"
		resultType="String">
		select email
		from users
		where user_id=#{userId}
	</select>

	<select id="getUserIdByEmail" parameterType="String"
		resultType="String">
		select user_id
		from users
		where email=#{email}
	</select>

	<update id="updateUserPwByEmailAndUserId" parameterType="updatePwReq">
		update users
		set
			user_pw=#{newPw}
		where user_id=#{userId} and email=#{email}
	</update>
	
	<!-- 비밀번호 찾기용 -->

	<select id="checkUserIdExist" parameterType="String"
		resultType="int">
		select count(*) from users where user_id = #{userId}
	</select>

	<select id="checkNicknameExist" parameterType="String"
		resultType="int">
		select count(*) from users 
		where nickname = #{nickname}
	</select>

	<select id="checkMyNicknameExist" parameterType="String"
		resultType="int">
		select id from users 
		where nickname = #{nickname}
	</select>
	
	<select id="checkEmailExist" parameterType="String"
		resultType="Integer">
		select count(*) from users where email = #{email}
	</select>
	
	<!-- 회원의 사용지점 이름 가져오기 -->
	<select id="getPlaceInfoByUserId" parameterType="int" resultType="getPlaceInfoByUserIdRes">
		select places.name, users.place_id
		from places
		join users on users.place_id = places.id
		where users.id = #{id}
	</select>
	
</mapper>